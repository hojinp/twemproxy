// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: oscm_server.proto

#include "oscm_server.pb.h"
#include "oscm_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* MetadataService_method_names[] = {
  "/MetadataService/GetMetadata",
  "/MetadataService/PutMetadata",
  "/MetadataService/DeleteMetadata",
};

std::unique_ptr< MetadataService::Stub> MetadataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MetadataService::Stub> stub(new MetadataService::Stub(channel));
  return stub;
}

MetadataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMetadata_(MetadataService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutMetadata_(MetadataService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMetadata_(MetadataService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MetadataService::Stub::GetMetadata(::grpc::ClientContext* context, const ::GetParam& request, ::GetReturn* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMetadata_, context, request, response);
}

void MetadataService::Stub::experimental_async::GetMetadata(::grpc::ClientContext* context, const ::GetParam* request, ::GetReturn* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMetadata_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::GetReturn>* MetadataService::Stub::AsyncGetMetadataRaw(::grpc::ClientContext* context, const ::GetParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetReturn>::Create(channel_.get(), cq, rpcmethod_GetMetadata_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetReturn>* MetadataService::Stub::PrepareAsyncGetMetadataRaw(::grpc::ClientContext* context, const ::GetParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetReturn>::Create(channel_.get(), cq, rpcmethod_GetMetadata_, context, request, false);
}

::grpc::Status MetadataService::Stub::PutMetadata(::grpc::ClientContext* context, const ::PutParam& request, ::PutReturn* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutMetadata_, context, request, response);
}

void MetadataService::Stub::experimental_async::PutMetadata(::grpc::ClientContext* context, const ::PutParam* request, ::PutReturn* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PutMetadata_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::PutReturn>* MetadataService::Stub::AsyncPutMetadataRaw(::grpc::ClientContext* context, const ::PutParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::PutReturn>::Create(channel_.get(), cq, rpcmethod_PutMetadata_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PutReturn>* MetadataService::Stub::PrepareAsyncPutMetadataRaw(::grpc::ClientContext* context, const ::PutParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::PutReturn>::Create(channel_.get(), cq, rpcmethod_PutMetadata_, context, request, false);
}

::grpc::Status MetadataService::Stub::DeleteMetadata(::grpc::ClientContext* context, const ::DeleteParam& request, ::DeleteReturn* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteMetadata_, context, request, response);
}

void MetadataService::Stub::experimental_async::DeleteMetadata(::grpc::ClientContext* context, const ::DeleteParam* request, ::DeleteReturn* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteMetadata_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::DeleteReturn>* MetadataService::Stub::AsyncDeleteMetadataRaw(::grpc::ClientContext* context, const ::DeleteParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DeleteReturn>::Create(channel_.get(), cq, rpcmethod_DeleteMetadata_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DeleteReturn>* MetadataService::Stub::PrepareAsyncDeleteMetadataRaw(::grpc::ClientContext* context, const ::DeleteParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DeleteReturn>::Create(channel_.get(), cq, rpcmethod_DeleteMetadata_, context, request, false);
}

MetadataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataService::Service, ::GetParam, ::GetReturn>(
          std::mem_fn(&MetadataService::Service::GetMetadata), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataService::Service, ::PutParam, ::PutReturn>(
          std::mem_fn(&MetadataService::Service::PutMetadata), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetadataService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetadataService::Service, ::DeleteParam, ::DeleteReturn>(
          std::mem_fn(&MetadataService::Service::DeleteMetadata), this)));
}

MetadataService::Service::~Service() {
}

::grpc::Status MetadataService::Service::GetMetadata(::grpc::ServerContext* context, const ::GetParam* request, ::GetReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataService::Service::PutMetadata(::grpc::ServerContext* context, const ::PutParam* request, ::PutReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetadataService::Service::DeleteMetadata(::grpc::ServerContext* context, const ::DeleteParam* request, ::DeleteReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


